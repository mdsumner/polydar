library(polydar)
library(polydar)
library(polydar)
usethis::use_rcpp()
usethis::use_package_doc()
library(polydar)
devtools::load_all(".")
devtools::load_all(".")
library(polydar)
polydar:::polydar()
library(polydar)
polydar:::polydar()
library(polydar)
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_readme_rmd()
usethis::use_code_of_conduct()
library(polydar)
library(polydar)
polydar:::polydar()
library(polydar)
usethis::use_news_md()
library(polydar)
library(polydar)
is.numeric(0L)
library(polydar)
polydar()
library(polydar)
library(polydar)
polydar()
polydar(matrix(rnorm(24, ncol = 2)))
polydar(matrix(rnorm(24), ncol = 2))
matrix(rnorm(24), ncol = 2)
devtools::load_all(".")
polydar(matrix(rnorm(24), ncol = 2))
polydar(x <- matrix(rnorm(24), ncol = 2))
set.seed(24)
polydar(x <- matrix(rnorm(24), ncol = 2))
plot(x); lines(x[c(1,10,8,7,5,4) + 1L, ])
plot(x); lines(x[c(1,10,8,7,5,4) + 1L, ])
polydar(x <- matrix(rnorm(240), ncol = 2))
plot(x)
polydar(x <- matrix(rnorm(2400), ncol = 2))
polydar(x <- matrix(rnorm(2e6), ncol = 2))
x <- matrix(rnorm(2e6), ncol = 2)
system.time(polydar(x))
system.time(chull(x))
system.time(geometry::delaunayn(xy))
system.time(geometry::delaunayn(x))
set.seed(24)
x <- matrix(rnorm(24), ncol = 2)
system.time(polydar(x))
## much faster: system.time(geometry::delaunayn(x))
plot(x); lines(x[c(1,10,8,7,5,4) + 1L, ])
plot(x); lines(x[c(1,10,8,7,5,4, 1) + 1L, ])
devtools::load_all(".")
system.time(polydar(x))
polydar(x)
devtools::load_all(".")
polydar(x)
devtools::load_all(".")
library(polydar)
library(polydar)
library(polydar)
polydar()
library(polydar)
library(polydar)
polydar()
system.time(polydar(x))
polydar(x, alpha = 20)
polydar(x, alpha = 20, xyThresh = 0)
polydar(x, alpha = 20, xyThresh = -1)
polydar(x, alpha = 20, xyThresh = 10)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 100)
library(polydar)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 100)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 1)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 10)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 20)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 12)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 13)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 14)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 15)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 16)
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 17)
polydar(x, minTriangles = 17)
polydar(x, minTriangles = 27)
set.seed(24)
x <- matrix(rnorm(24), ncol = 2)
system.time(polydar(x))
polydar(x, alpha = 20, xyThresh = 10, lmax = 2, minTriangles = 16)
## much faster: system.time(geometry::delaunayn(x))
plot(x); lines(x[c(1,10,8,7,5,4, 1) + 1L, ])
plot(x); lines(x[c(1,10,8,7,5,4, 1) + 1L, ])
set.seed(24); plot(matrix(rnorm(24), ncol = 2)); lines(x[c(1,10,8,7,5,4, 1) + 1L, ])
library(polydar)
quakes
xy <- matrix(as.vector(quakes), ncol = 2L)
polydar:::polydar(xy)
xy <- matrix(as.vector(quakes), ncol = 2L)
polydar:::polydar(xy)
names(quakes)
lapply(quakes, class)
as.vector(quakes)
xy <- matrix(unlist(quakes), ncol = 2L)
polydar:::polydar(xy)
plot(xy)
args(polydar)
polydar:::polydar(xy, alpha = 5)
polydar::polydar(c(quakes$long, quakes$lat))
library(polydar)
readLines("../polylidar/test/fixtures/100K_array_3d.csv", n = 10)
readLines("../polylidar/tests/fixtures/100K_array_3d.csv", n = 10)
d <- readr::read_csv("../polylidar/tests/fixtures/100K_array_3d.csv")
library(rgl)
plot3d(d)
rglwidget()
d <- readr::read_csv("../polylidar/tests/fixtures/building1.csv")
d)
d
plot3d(d)
clear3d()
plot3d(d)
rglwidget()
library(polydar)
devtools::load_all(".")
polydar()
library(polydar)
polydar()
library(polydar)
library(polydar)
polydar()
x
xy
polydar(xy)
library(polydar)
polydar(xy)
library(polydar)
polydar(xy)
i <- polydar(xy)
i[[1]]
plot(xy)
lines(xy[i[[1]] + 1, ])
plot(xy, pch = ".")
lines(xy[i[[1]] + 1, ])
lines(xy[i[[1]] + 1, ], col = "red")
lines(xy[i[[1]] + 1, ], col = "red", lwd = 10)
wr <- function(x) c(x, x[1])
lapply(i, function(x) lines(xy[wr(x) + 1, ]))
d0 <- function(x) x[x > -1]
lapply(i, function(x) lines(xy[d0(wr(x)) + 1, ]))
lapply(i, function(x) lines(xy[d0(wr(x)) + 1, ]))d
dim(xy)
l[[1]]
i[[1]]
pts <- locator()
pts <- do.call(cbind, pts)
plot(pts)
i <- polydar(pts)
i
## the boilerplate simple-2d example from polylidar
x <- c(0.0, 0.0,
0.0, 1.0,
1.0, 1.0,
1.0, 0.0,
5.0, 0.1)
x <- as.vector(t(as.matrix(x[, 1:2])))
plot(matrix(x, ncol = 2, byrow = T))
plot(matrix(x, ncol = 2, byrow = T), type = "l")
polydar(x)
matrix(x, ncol = 2, byrow = T)
matrix(x, ncol = 2, byrow = T)[c(3, 0, 1, 1) + 1, ]
lines(matrix(x, ncol = 2, byrow = T)[c(3, 0, 1, 1) + 1, ])
plot(matrix(x, ncol = 2, byrow = T), type = "p")
lines(matrix(x, ncol = 2, byrow = T)[c(3, 0, 1, 1, 3) + 1, ])
polydar()
x <- c(0.0, 0.0,
0.0, 1.0,
1.0, 1.0,
1.0, 0.0,
5.0, 0.1)
x <- matrix(x, byrow = TRUE, ncol = 2)
plot(x)
plot(x); text(x, lab = 1:5)
plot(x, pch = ".")
plot(x); text(x, lab = 1:5)
plot(x, pch = "."); text(x, lab = 1:5)
c(3, 0, 1, 2) + 1
xy <- x
xy
polydar(x)
devtools::load_all(".")
polydar(x)
polydar(xy)
x <- polydar(xy)
plot(xy)
lines(xy[x[[1]], ])
plot(xy)
lines(xy[x[[1]] + 1, ])
devtools::load_all(".")
devtools::load_all(".")
plot(yy, pch = "."); text(xy[x[[1]]], lab = 1:5)
plot(xy, pch = "."); text(xy[x[[1]]], lab = 1:5)
plot(x, pch = "."); text(x, lab = 1:5)
plot(xy, pch = "."); text(xy, lab = 1:5)
lines(xy[x[[1]], ])
x <- polydar(xy)
plot(xy, pch = "."); text(xy, lab = 1:5)
lines(xy[x[[1]], ])
usethis::use_data_raw()
pl_fixture <-
matrix(c(0.0, 0.0,
0.0, 1.0,
1.0, 1.0,
1.0, 0.0,
5.0, 0.1), ncol = 2L, byrow = TRUE)
usethis::use_data(pl_fixture, overwrite = TRUE)
hardcase1 <- as.matrix(read.csv(
"https://raw.githubusercontent.com/JeremyBYU/polylidar/master/tests/fixtures/hardcase1.csv"))
usethis::use_data(hardcase1, overwrite = TRUE)
usethis::use_package_doc()
plot(hardcase1)
library(polydar)
polydar(hardcase1)
polydar(hardcase1, alpha = 1)
polydar(hardcase1, alpha = 2)
polydar(hardcase1, alpha = 3)
polydar(hardcase1, alpha = 30)
polydar(hardcase1, alpha = .1)
polydar(hardcase1, minTriangles = 100)
polydar(hardcase1)
plot(hardcase1)
idx <- polydar(hardcase1)
lines(hardcase[idx[[1]], ])
lines(hardcase1[idx[[1]], ])
idx <- polydar(hardcase1)
idx <- polydar(hardcase1, alpha=0.0, xyThresh=20.0)
idx
lines(hardcase1[idx[[1]], ])
idx[[1]]
dim(hardcase1)
lines(hardcase1[c(46, 47, 45, 46), ])
points(hardcase1[c(46, 47, 45, 46), ], col = "red")
idx <- polydar(hardcase1, alpha=0.0, xyThresh=200.0)
idx <- polydar(hardcase1, alpha=0.0, xyThresh=20.0)
idx <- polydar(hardcase1, alpha=0.1, xyThresh=20.0)
idx
polydar(alpha=0.0, xyThresh=1300.0)
polydar(runif(100), alpha=0.0, xyThresh=1300.0)
polydar(xy <- matrix(runif(100), ncol = 2), alpha=0.0, xyThresh=1300.0)
plot(xy)
idx <- polydar(xy <- matrix(runif(100), ncol = 2), alpha=0.0, xyThresh=1300.0)
plot(xy); lines(xy[idx[[1]], ])
plot(simple2d)
library(polydar)
simple2d <-
matrix(c(0.0, 0.0,
0.0, 1.0,
1.0, 1.0,
1.0, 0.0,
5.0, 0.1), ncol = 2L, byrow = F)
plot(simple2d)
lines(simple2d[c(3, 0, 1, 1) + 1, ])
simple2d <-
matrix(c(0.0, 0.0,
0.0, 1.0,
1.0, 1.0,
1.0, 0.0,
5.0, 0.1), ncol = 2L, byrow = TRUE)
devtools::load_all(".")
polydar()
devtools::load_all(".")
polydar()
plot(simple2d)
plot(simple2d, pch = ".")
text(simple2d, lab = 1:5)
lines(simple2d[c(3, 0, 1, 2) + 1, ])
usethis::create_from_github("hypertidy/org-logo")
